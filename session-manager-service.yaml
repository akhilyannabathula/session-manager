apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: fastapi-session-manager-service-deployment
  name: fastapi-session-manager-service-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fastapi-session-manager-service-deployment
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: fastapi-session-manager-service-deployment
    spec:
      containers:
        - image: fastapi-session-manager-service-image:latest
          name: fastapi-session-manager-service-container
          resources: {}
          imagePullPolicy: Never
          ports:
            - containerPort: 80


---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-session-manager-service
spec:
  selector:
    app: fastapi-session-manager-service-deployment #this will target all pods with this label
  type: LoadBalancer
  sessionAffinity: None
  ports:
    - protocol: TCP
      port: 8085 #port on which you can access this service from browser, can be any available port
      targetPort: 80 #port yout fastapi app is listening inside a container


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-stack
  labels:
    app: redis-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-stack
  template:
    metadata:
      labels:
        app: redis-stack
    spec:
      containers:
        - name: redis-stack
          image: redis/redis-stack:latest
          ports:
            - containerPort: 6379
            - containerPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: redis-stack
spec:
  selector:
    app: redis-stack
  type: LoadBalancer # Use NodePort if you're not on cloud
  ports:
    - name: redis
      protocol: TCP
      port: 6379       # Cluster-wide port
      targetPort: 6379 # Container port

    - name: redisinsight
      protocol: TCP
      port: 8001
      targetPort: 8001

